type Query {
    person(id: ID!): Person
    classData(id: ID!): ClassData
}

type Mutation {
    registerClass(input: RegisterClassInput!): RegisterClassPayload!
    unregisterClass(input: UnregisterClassInput!): UnregisterClassPayload!
    waitlistClass(input: WaitlistClassInput!): WaitlistClassPayload!
    moveFromWaitlistToRegistered(classDataID: ID!, personToRegisterID: ID!, personToRemoveID: ID!): MoveFromWaitlistToRegisteredPayload!
}

type Person {
    id: ID!
    email: String!
    name: String!
    registrationID: String!
    classDataID: ID
    waitlist: Boolean!
}

type ClassData {
    id: ID!
    location: String
    date: String
    slots: Int
    registeredNumber: Int
    waitlistSize: Int
}

input RegisterClassInput {
    personID: ID!
    classDataID: ID!
}

type RegisterClassPayload {
    person: Person
    classData: ClassData
}

input UnregisterClassInput {
    personID: ID!
    classDataID: ID!
}

type UnregisterClassPayload {
    person: Person
    classData: ClassData
}

input WaitlistClassInput {
    personID: ID!
    classDataID: ID!
}

type WaitlistClassPayload {
    person: Person
    classData: ClassData
}

type MoveFromWaitlistToRegisteredPayload {
    classData: ClassData
    registeredPerson: Person
    waitlistedPerson: Person
}
