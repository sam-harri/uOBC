package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"uOBCServer/pkg/models"
)

// RegisterClass is the resolver for the registerClass field.
func (r *mutationResolver) RegisterClass(ctx context.Context, input models.RegisterClassInput) (*models.RegisterClassPayload, error) {
	panic(fmt.Errorf("not implemented: RegisterClass - registerClass"))
}

// UnregisterClass is the resolver for the unregisterClass field.
func (r *mutationResolver) UnregisterClass(ctx context.Context, input models.UnregisterClassInput) (*models.UnregisterClassPayload, error) {
	panic(fmt.Errorf("not implemented: UnregisterClass - unregisterClass"))
}

// WaitlistClass is the resolver for the waitlistClass field.
func (r *mutationResolver) WaitlistClass(ctx context.Context, input models.WaitlistClassInput) (*models.WaitlistClassPayload, error) {
	panic(fmt.Errorf("not implemented: WaitlistClass - waitlistClass"))
}

// MoveFromWaitlistToRegistered is the resolver for the moveFromWaitlistToRegistered field.
func (r *mutationResolver) MoveFromWaitlistToRegistered(ctx context.Context, classDataID string, personToRegisterID string, personToRemoveID string) (*models.MoveFromWaitlistToRegisteredPayload, error) {
	panic(fmt.Errorf("not implemented: MoveFromWaitlistToRegistered - moveFromWaitlistToRegistered"))
}

// Person is the resolver for the person field.
func (r *queryResolver) Person(ctx context.Context, id string) (*models.Person, error) {
	panic(fmt.Errorf("not implemented: Person - person"))
}

// ClassData is the resolver for the classData field.
func (r *queryResolver) ClassData(ctx context.Context, id string) (*models.ClassData, error) {
	panic(fmt.Errorf("not implemented: ClassData - classData"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
